# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Filter dataset to show only average fitness below 0.15
filtered_dataset <- dataset[dataset$averageFitness < 0.10,]
# Select relevant columns
relevant_columns <- c("MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate")
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(filtered_dataset, id.vars = c("Iteration", "InitialisationMethod", "activationFunction", "averageFitness"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = InitialisationMethod, shape = InitialisationMethod)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "lm", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = InitialisationMethod), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value") +
facet_grid(rows = vars(activationFunction))  # Facet grid by activation function
return(plot)
})
# Display plots one by one
for (plot in plots) {
print
(plot)
}
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Filter dataset to show only average fitness below 0.15
filtered_dataset <- dataset[dataset$averageFitness < 0.10,]
# Select relevant columns
relevant_columns <- c("MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate")
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(filtered_dataset, id.vars = c("Iteration", "InitialisationMethod", "activationFunction", "averageFitness"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = InitialisationMethod, shape = InitialisationMethod)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "lm", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = InitialisationMethod), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value") +
facet_grid(rows = vars(activationFunction))  # Facet grid by activation function
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Filter dataset to show only average fitness below 0.15
filtered_dataset <- dataset[dataset$averageFitness < 0.20,]
# Select relevant columns
relevant_columns <- c("MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate")
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(filtered_dataset, id.vars = c("Iteration", "InitialisationMethod", "activationFunction", "averageFitness"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = InitialisationMethod, shape = InitialisationMethod)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "lm", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = InitialisationMethod), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value") +
facet_grid(rows = vars(activationFunction))  # Facet grid by activation function
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Filter dataset to show only average fitness below 0.15
filtered_dataset <- dataset[dataset$averageFitness < 0.20,]
# Select relevant columns
relevant_columns <- c("MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate")
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(filtered_dataset, id.vars = c("Iteration", "InitialisationMethod", "activationFunction", "averageFitness"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = activationFunction, shape = activationFunction)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "lm", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = InitialisationMethod), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value") +
facet_grid(rows = vars(InitialisationMethod))  # Facet grid by activation function
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Filter dataset to show only average fitness below 0.15
filtered_dataset <- dataset[dataset$averageFitness < 0.20,]
# Select relevant columns
relevant_columns <- c("MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate")
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(filtered_dataset, id.vars = c("Iteration", "InitialisationMethod", "activationFunction", "averageFitness"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = activationFunction, shape = activationFunction)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "lm", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = activeBindingFunction), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value") +
facet_grid(rows = vars(InitialisationMethod))
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Filter dataset to show only average fitness below 0.15
filtered_dataset <- dataset[dataset$averageFitness < 0.2,]
# Select relevant columns
relevant_columns <- c("MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate")
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(filtered_dataset, id.vars = c("Iteration", "InitialisationMethod", "activationFunction", "averageFitness"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = InitialisationMethod, shape = InitialisationMethod)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "lm", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = InitialisationMethod), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value") +
facet_grid(rows = vars(activationFunction))  # Facet grid by activation function
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = InitialisationMethod, shape = InitialisationMethod)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "lm", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = activationFunction), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value") +
facet_grid(rows = vars(activationFunction))  # Facet grid by activation function
return(plot)
})
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Filter dataset to show only average fitness below 0.15
filtered_dataset <- dataset[dataset$averageFitness < 0.2,]
# Select relevant columns
relevant_columns <- c("MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate")
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(filtered_dataset, id.vars = c("Iteration", "InitialisationMethod", "activationFunction", "averageFitness"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = InitialisationMethod, shape = InitialisationMethod)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "lm", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = activationFunction), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value") +
facet_grid(rows = vars(activationFunction))  # Facet grid by activation function
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = activationFunction, shape = activationFunction)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "lm", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = activationFunction), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value") +
facet_grid(rows = vars(activationFunction))  # Facet grid by activation function
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Filter dataset to show only average fitness below 0.15
filtered_dataset <- dataset[dataset$averageFitness < 0.2,]
# Select relevant columns
relevant_columns <- c("MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate")
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(filtered_dataset, id.vars = c("Iteration", "InitialisationMethod", "activationFunction", "averageFitness"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = activationFunction, shape = activationFunction)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "lm", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = activationFunction), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value") +
facet_grid(rows = vars(InitialisationMethod))  # Facet grid by activation function
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
View(dataset)
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Filter dataset to show only average fitness below 0.15
filtered_dataset <- dataset[dataset$averageFitness < 0.2,dataset$InitialisationMethod = "lhs" ]
# Read dataset
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Filter dataset to show only average fitness below 0.15
filtered_dataset <- dataset[dataset$averageFitness < 0.2,dataset$InitialisationMethod == "lhs" ]
library(ggplot2)
# Read dataset
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
filtered_dataset <- dataset[dataset$averageFitness < 0.2 & dataset$InitialisationMethod == "lhs",]
# Select relevant columns
relevant_columns <- c("MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate")
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(filtered_dataset, id.vars = c("Iteration", "InitialisationMethod", "activationFunction", "averageFitness"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = activationFunction, shape = activationFunction)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "lm", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = activationFunction), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Select relevant columns
relevant_columns <- c("MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate")
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(filtered_dataset, id.vars = c("Iteration", "InitialisationMethod", "activationFunction", "averageFitness"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = activationFunction, shape = activationFunction)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = activationFunction), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
library(ggplot2)
# Read dataset
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
filtered_dataset <- dataset[dataset$averageFitness < 0.12 & dataset$InitialisationMethod == "lhs",]
# Select relevant columns
relevant_columns <- c("MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate")
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(filtered_dataset, id.vars = c("Iteration", "InitialisationMethod", "activationFunction", "averageFitness"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = activationFunction, shape = activationFunction)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = activationFunction), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Select relevant columns
relevant_columns <- c("MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate")
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(filtered_dataset, id.vars = c("Iteration", "InitialisationMethod", "activationFunction", "averageFitness"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = activationFunction, shape = activationFunction)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = activationFunction), alpha = 0.00) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Filter dataset to show only average fitness below 0.12 and InitialisationMethod is lhs
filtered_dataset <- dataset[dataset$averageFitness < 0.12 & dataset$InitialisationMethod == "lhs",]
# Create scatter plot
scatter_plot <- ggplot(filtered_dataset, aes(x = PopSize/TournamentSize, y = TournamentSize, color = averageFitness)) +
geom_point(alpha = 0.8, size = 3.3) +
scale_color_gradient(low = "blue", high = "red") +
my_theme +
labs(title = "Tournament Size vs. Population Size Ratio",
x = "Population Size / Tournament Size", y = "Tournament Size",
color = "Average Fitness")
print(scatter_plot)
View(dataset)
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
library(ggplot2)
# tournaments:
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Filter dataset to show only average fitness below 0.12 and InitialisationMethod is lhs
filtered_dataset <- dataset[dataset$averageFitness < 0.12 & dataset$InitialisationMethod == "lhs",]
# Create scatter plot
scatter_plot <- ggplot(filtered_dataset, aes(x = PopSize/TournamentSize, y = TournamentSize, color = averageFitness)) +
geom_point(alpha = 0.8, size = 3.3) +
scale_color_gradient(low = "blue", high = "red") +
my_theme +
labs(title = "Tournament Size vs. Population Size Ratio",
x = "Population Size / Tournament Size", y = "Tournament Size",
color = "Average Fitness")
print(scatter_plot)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = activationFunction, shape = activationFunction)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = activationFunction), alpha = 0.00) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = activationFunction, shape = activationFunction)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "lm", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = activationFunction), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value") +
facet_grid(rows = vars(InitialisationMethod))  # Facet grid by activation function
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Filter dataset to show only average fitness below 0.15
filtered_dataset <- dataset[dataset$averageFitness < 0.2,]
# Select relevant columns
relevant_columns <- c("MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate")
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(filtered_dataset, id.vars = c("Iteration", "InitialisationMethod", "activationFunction", "averageFitness"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot <- ggplot(melted_dataset[melted_dataset$variable == variable,], aes(x = averageFitness, y = value, color = activationFunction, shape = activationFunction)) +
geom_point(alpha = 1, size = 3.3) +
geom_smooth(method = "lm", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = activationFunction), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
my_theme +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value") +
facet_grid(rows = vars(InitialisationMethod))  # Facet grid by activation function
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
