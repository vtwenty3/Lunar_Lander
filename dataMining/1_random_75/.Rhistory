# Read dataset
dataset <- read.csv("grid_search_results.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"),
legend.position = "bottom")
# Load necessary libraries
library(ggplot2)
library(dplyr)
#install.packages("reshape2")
# Read dataset
dataset <- read.csv("grid_search_results.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"),
legend.position = "bottom")
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"),
legend.position = "bottom")
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness",  "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation )) +
geom_point(alpha = 1, size = 3) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "#f7c602", high = "black") +
#facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value,  )) +
geom_point(alpha = 1, size = 3) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "#f7c602", high = "black") +
#facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness",  "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.05, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value,  )) +
geom_point(alpha = 1, size = 3) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "#f7c602", high = "black") +
#facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness",  "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.04, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value,  )) +
geom_point(alpha = 1, size = 3) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "#f7c602", high = "black") +
#facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness",  "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.1, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value,  )) +
geom_point(alpha = 1, size = 3) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "#f7c602", high = "black") +
#facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness",  "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.05, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value,  )) +
geom_point(alpha = 1, size = 3) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "#f7c602", high = "black") +
#facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
View(dataset)
setwd("C:/Users/Vincent/Desktop/SET10107Coursework2023/dataMining/1_random_75")
dataset <- read.csv("Random_75.csv")
library(ggplot2)
# Custom color palette
color_palette <- c("#128EFB", "#004D40", "#D81B60")
filtered_dataset <- dataset[dataset$AverageFitness < 0.15,]
# Create individual scatter plots
plots <- lapply(colnames(filtered_dataset), function(variable) {
plot <- ggplot(filtered_dataset, aes_string(y = variable, x = "AverageFitness", color = "InitialisationMethod")) +
geom_point(alpha = 1, size = 2.3) +
geom_smooth(method = "lm", se = TRUE, linetype = "solid", level = 0.20, size = 1,
aes(fill = InitialisationMethod), alpha = 0.05) +
scale_color_manual(values = color_palette) +
scale_fill_manual(values = color_palette) +
theme_bw() +
labs(title = paste("AverageFitness vs.", variable),
y = variable,
x = "Average Fitness")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
