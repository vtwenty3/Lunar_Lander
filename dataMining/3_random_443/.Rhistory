panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation )) +
geom_point(alpha = 1, size = 2.5) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "orange", high = "black") +
xlim(0.023, 0.10) +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Read dataset
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
my_colors <- c("#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#00FFFF", "#FF00FF")
# Define a custom color scale for MutateChangePopulation
my_color_scale <- scale_color_manual(values = my_colors,
breaks = c(0.10, 0.20, 0.30, 0.40, 0.50, 0.60),
labels = c("0.10", "0.20", "0.30", "0.40", "0.50", "0.60"))
# Custom theme
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"),
legend.position = "bottom")
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation )) +
geom_point(alpha = 1, size = 2.5) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
my_color_scale +
xlim(0.023, 0.10) +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Read dataset
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation )) +
geom_point(alpha = 1, size = 2.5) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "orange", high = "black") +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Read dataset
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation, shape = MutateChangePopulation )) +
geom_point(alpha = 1, size = 2.5) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "orange", high = "black") +
scale_shape_manual(values = c(16, 17, 18)) +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation )) +
geom_point(alpha = 1, size = 2.5) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "orange", high = "black") +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Read dataset
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, shape = MutateChangePopulation )) +
geom_point(alpha = 1, size = 2.5) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "orange", high = "black") +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Read dataset
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, shape = MutateChangePopulation )) +
geom_point(alpha = 1, size = 2.5) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
#scale_color_gradient(low = "orange", high = "black") +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Read dataset
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation )) +
geom_point(alpha = 1, size = 2.5) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
#scale_color_gradient(low = "orange", high = "black") +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Read dataset
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation )) +
geom_point(alpha = 1, size = 2.5) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "yellow", high = "black") +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Read dataset
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation )) +
geom_point(alpha = 1, size = 2.5) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "#D81B60", mid="#128EFB", high = "black") +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Read dataset
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation )) +
geom_point(alpha = 1, size = 2.5) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_colour_gradient2(low = "#D81B60", mid="#128EFB", high = "black") +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Read dataset
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation )) +
geom_point(alpha = 1, size = 2.5) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "#D81B60", high = "black") +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Read dataset
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"))
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation )) +
geom_point(alpha = 1, size = 2.5) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "#128EFB", high = "black") +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Read dataset
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"),
legend.position = "bottom")
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation )) +
geom_point(alpha = 1, size = 2.5) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "#f7c602", high = "black") +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Read dataset
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"),
legend.position = "bottom")
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation )) +
geom_point(alpha = 1, size = 3) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "#f7c602", high = "black") +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Read dataset
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"),
legend.position = "bottom")
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation )) +
geom_point(alpha = 1, size = 3) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "#f7c602", high = "black") +
xlim(0.023, 0.10) +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
# Read dataset
dataset <- read.csv("random_search_combined.csv")
# Custom color palette
color_palette <- c("#128EFB", "orange", "#D81B60")
my_theme <- theme_bw() +
theme(text = element_text(size = 14),
panel.grid.major = element_line(size = 0.5, linetype = "dashed", color = "gray60"),
panel.grid.minor = element_line(size = 0.25, linetype = "dashed", color = "gray60"),
legend.position = "bottom")
# Select relevant columns
relevant_columns <- c("MinGene", "MaxGene", "PopSize", "TournamentSize", "PreserveElitePercentage", "MutateChangePopulation", "MaxMutationRate" )
# Melt the dataset for ggplot2
library(reshape2)
melted_dataset <- melt(dataset, id.vars = c("Iteration", "AverageFitness", "ActivationFunction", "MaxGene", "MutateChangePopulation"), measure.vars = relevant_columns)
# Create a list of plots
plots <- lapply(relevant_columns, function(variable) {
plot_dataset <- melted_dataset[melted_dataset$variable == variable & melted_dataset$AverageFitness < 0.10, ]
plot <- ggplot(plot_dataset, aes(x = AverageFitness, y = value, color = MutateChangePopulation )) +
geom_point(alpha = 1, size = 3) +
geom_smooth(method = "loess", se = TRUE, linetype = "solid", level = 0.75, size = 1, alpha = 0.20) +
my_theme +
scale_color_gradient(low = "#f7c602", high = "black") +
facet_grid(rows = vars(ActivationFunction)) +
labs(title = paste("Average Fitness vs.", variable),
x = "Average Fitness", y = "Value")
return(plot)
})
# Display plots one by one
for (plot in plots) {
print(plot)
}
